{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to NEXA","text":"<p>NEXA is a semantic workflow engine for executing modular, multi-scale computational pipelines. It enables the composition of external modules (scripts, executables, containers) into validated, visualizable, and executable workflows using ontological reasoning and JSON-based definitions.</p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>Semantic workflow definition via JSON + ontologies</li> <li>Modular execution: run any external code as a \"module\"</li> <li>Multiple backends: local, Nextflow, remote</li> <li>Interactive visualization with React Flow (drag &amp; drop, semantic edges)</li> <li>Ontology-driven matching of models and targets</li> </ul>"},{"location":"#get-started","title":"\ud83d\ude80 Get Started","text":"<ol> <li>Install NEXA</li> <li>Run your first workflow</li> <li>Visualize the workflow</li> </ol>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<p>Explore the core concepts and advanced features:</p> <ul> <li>Workflows: How to define concrete workflows</li> <li>Modules: How to create reusable computational modules</li> <li>Semantic Matching: How NEXA uses ontologies to assemble workflows</li> <li>Execution: How to run workflows locally or with Nextflow</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python \u2265 3.9</li> <li>Node.js \u2265 18 (for visualization)</li> <li>Nextflow (optional, for Nextflow backend)</li> </ul>"},{"location":"installation/#install-from-source","title":"Install from source","text":"<pre><code>git clone https://github.com/your-username/nexa.git\ncd nexa\npip install -e .\n</code></pre> <p>This installs the nexa and nexa-viz command-line tools.</p>"},{"location":"quickstart/","title":"Quick Start","text":"<pre><code># Quick Start\n\n## Run a demo workflow\n\nNEXA includes a demo workflow for polymer simulation.\n\n```bash\ncd nexa/demo\nnexa demo_workflow.json --backend local\n</code></pre> <p>Output:</p> <p>\u2705 Nextflow workflow completed successfully.</p> <p>\ud83d\udca1 Want to visualize this workflow?    Run: nexa-viz /path/to/demo_workflow.json</p> <p>Visualize the workflow</p> <p>nexa-viz demo_workflow.json</p> <p>Then open http://localhost:5173 in your browser to see the interactive graph. </p> <pre><code>Remote server? Use SSH tunneling:\n</code></pre> <p>ssh -L 5173:localhost:5173 user@remote-host</p>"},{"location":"visualization/","title":"Workflow Visualization","text":"<p>NEXA includes an interactive visualizer based on React Flow.</p>"},{"location":"visualization/#features","title":"Features","text":"<ul> <li>Drag-and-drop node positioning</li> <li>Semantic edge labels (e.g., <code>polymer_chain \u2192 polymer_chain</code>)</li> <li>Mini-map for large workflows</li> <li>Zoom and pan</li> </ul>"},{"location":"visualization/#usage","title":"Usage","text":"<pre><code>nexa-viz workflow.json\n</code></pre> <p>Then open http://localhost:5173. </p> <pre><code>Note: The visualization is read-only \u2013 it does not modify the workflow.\n</code></pre>"},{"location":"concepts/modules/","title":"Modules","text":"<pre><code># Modules\n\nA **module** is an external computational unit (script, executable, container) defined by a JSON file.\n\n## Module definition\n\n```json\n{\n  \"id\": \"chain_builder\",\n  \"executable\": \"python\",\n  \"script\": \"scripts/chain_builder.py\",\n  \"input_ports\": [],\n  \"output_ports\": [\"polymer_chain\"],\n  \"parameters\": {\n    \"monomer\": \"ethylene\"\n  }\n}\n</code></pre>"},{"location":"concepts/modules/#requirements-for-scripts","title":"Requirements for scripts","text":"<p>Your script must support: </p> <pre><code>--output_dir PATH: directory to write output files\n--params FILE.json: optional parameters file\nOutput files named as &lt;port&gt;.json (e.g., polymer_chain.json)\n</code></pre>"},{"location":"concepts/semantic-matching/","title":"Semantic Matching","text":"<pre><code># Semantic Matching\n\nNEXA uses **RDF ontologies** to match models and targets based on semantic compatibility (e.g., scale).\n\n## Workflow\n\n1. Define models and targets in **JSON-LD** with ontology URIs\n2. Use the `Matcher` to find compatible pairs\n3. Generate concrete workflows from templates\n\n## Example ontology snippet\n\n```turtle\nmw:emulsion_polymerization_molecular mw:hasScale mw:molecular .\nmw:leaching_rate_molecular mw:hasScale mw:molecular .\n</code></pre> <p>Only models and targets with the same scale are matched.</p>"},{"location":"concepts/workflows/","title":"Workflows","text":"<pre><code># Workflows\n\nA **concrete workflow** in NEXA is a JSON file that defines:\n\n- A list of **modules** to execute\n- **Connections** between module inputs and outputs\n\n## Example\n\n```json\n{\n  \"workflow_id\": \"polymer_leaching\",\n  \"modules\": [\n    {\n      \"id\": \"chain_builder\",\n      \"ref\": \"modules/chain_builder/chain_builder.json\"\n    },\n    {\n      \"id\": \"ff_builder\",\n      \"ref\": \"modules/ff_builder/ff_builder.json\"\n    }\n  ],\n  \"connections\": [\n    {\n      \"from\": { \"module\": \"chain_builder\", \"output\": \"polymer_chain\" },\n      \"to\": { \"module\": \"ff_builder\", \"input\": \"polymer_chain\" }\n    }\n  ]\n}\n</code></pre> <p>Each connection links an output port of one module to an input port of another.</p>"},{"location":"execution/backends/","title":"Backends","text":"<pre><code># Execution Backends\n\nNEXA supports multiple backends for workflow execution.\n\n## Local backend\n\nRuns modules sequentially using `subprocess`.\n\n```bash\nnexa workflow.json --backend local --workdir runs/myrun\n</code></pre>"},{"location":"execution/backends/#nextflow-backend","title":"Nextflow backend","text":"<p>Generates and runs a Nextflow pipeline. </p> <pre><code>nexa workflow.json --backend nextflow --workdir runs/myrun\n</code></pre>"},{"location":"execution/backends/#remote-backend","title":"Remote backend","text":"<p>(Mock implementation) \u2013 extend to support Slurm, SSH, etc. </p>"},{"location":"execution/nextflow/","title":"Nextflow","text":"<p>```markdown</p>"},{"location":"execution/nextflow/#nextflow-integration","title":"Nextflow Integration","text":"<p>NEXA automatically generates a valid Nextflow DSL2 script from your workflow.</p>"},{"location":"execution/nextflow/#generated-script-features","title":"Generated script features","text":"<ul> <li>One <code>process</code> per module</li> <li>Channels for data passing</li> <li>Parameter handling via <code>params.json</code></li> <li>Absolute paths for script execution</li> </ul>"},{"location":"execution/nextflow/#customization","title":"Customization","text":"<p>You can extend the generator in <code>nexa/backends/nextflow.py</code> to: - Add container directives - Customize resource requests - Support file staging</p>"}]}